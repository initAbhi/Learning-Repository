// https://www.geeksforgeeks.org/find-position-element-sorted-array-infinite-numbers/
public class InfiniteArray {
    public static void main(String[] args) {
        int[] arr = {9, 18, 24, 27, 35, 42, 51, 57, 66, 69, 75, 82, 90, 96, 104, 106, 113, 123, 129, 133, 138, 140, 149, 157, 159, 168, 172, 181, 189, 196, 201, 208, 217, 224, 229, 236, 243, 251, 259, 267, 275, 278, 286, 296, 301, 311, 313, 321, 326, 330, 336, 341, 349, 352, 357, 364, 373, 376, 385, 390, 392, 402, 407, 415, 424, 430, 436, 446, 454, 457, 467, 469, 471, 480, 489, 497, 501, 508, 512, 521, 530, 540, 547, 555, 557, 563, 571, 580, 588, 592, 594, 603, 609, 618, 626, 630, 632, 640, 649, 659, 662, 671, 679, 687, 690, 699, 706, 711, 719, 724, 732, 736, 745, 752, 757, 766, 775, 782, 791, 800, 805, 813, 821, 829, 838, 847, 850, 854, 864, 870, 878, 886, 889, 891, 896, 905, 915, 921, 931, 934, 936, 943, 950, 954, 958, 967, 975, 983, 985, 994, 1001, 1011, 1017, 1023, 1028, 1036, 1041, 1047, 1052, 1056, 1062, 1068, 1071, 1079, 1082, 1084, 1094, 1098, 1102, 1110, 1117, 1120, 1127, 1131, 1137, 1145, 1152, 1160, 1163, 1173, 1177, 1185, 1192, 1200, 1205, 1213, 1222, 1231, 1238, 1248, 1253, 1259, 1267, 1275, 1279, 1284, 1289, 1297, 1303, 1306, 1314, 1320, 1323, 1330, 1338, 1345, 1351, 1357, 1365, 1373, 1380, 1387, 1393, 1397, 1401, 1406, 1415, 1418, 1423, 1430, 1438, 1443, 1445, 1450, 1453, 1462, 1466, 1471, 1475, 1484, 1488, 1492, 1501, 1509, 1518, 1520, 1528, 1534, 1540, 1548, 1557, 1563, 1568, 1575, 1585, 1593, 1602, 1608, 1612, 1618, 1628, 1637, 1642, 1650, 1656, 1665, 1673, 1679, 1689, 1694, 1698, 1708, 1711, 1721, 1727, 1733, 1739, 1745, 1749, 1759, 1765, 1771, 1780, 1784, 1788, 1794, 1796, 1803, 1810, 1818, 1828, 1837, 1843, 1851, 1860, 1868, 1872, 1881, 1884, 1889, 1897, 1901, 1906, 1915, 1924, 1929, 1936, 1940, 1948, 1957, 1962, 1972, 1980, 1986, 1990, 1994, 2001, 2008, 2016, 2020, 2026, 2032, 2039, 2043, 2051, 2061, 2067, 2074, 2081, 2087, 2096, 2100, 2106, 2113, 2120, 2129, 2134, 2136, 2144, 2148, 2155, 2163, 2168, 2175, 2177, 2184, 2188, 2192, 2201, 2208, 2214, 2224, 2231, 2238, 2248, 2257, 2261, 2266, 2272, 2277, 2282, 2285, 2290, 2299, 2307, 2313, 2318, 2322, 2325, 2329, 2333, 2338, 2345, 2351, 2360, 2367, 2376, 2381, 2386, 2392, 2398, 2408, 2413, 2420, 2427, 2431, 2439, 2446, 2454, 2463, 2472, 2479, 2483, 2492, 2499, 2504, 2511, 2516, 2521, 2531, 2537, 2542, 2545, 2552, 2559, 2563, 2566, 2572, 2575, 2584, 2589, 2592, 2601, 2607, 2614, 2620, 2629, 2637, 2646, 2651, 2658, 2665, 2667, 2673, 2683, 2692, 2701, 2706, 2715, 2721, 2726, 2735, 2741, 2751, 2755, 2762, 2770, 2777, 2783, 2792, 2795, 2805, 2809, 2819, 2828, 2833, 2843, 2850, 2855, 2861, 2869, 2879, 2884, 2888, 2891, 2897, 2905, 2912, 2918, 2922, 2927, 2934, 2938, 2947, 2952, 2962, 2968, 2971, 2975, 2983, 2990, 2996, 3004, 3012, 3019, 3029, 3034, 3043, 3048, 3054, 3060, 3068, 3075, 3082, 3088, 3094, 3101, 3108, 3114, 3118, 3124, 3133, 3137, 3141, 3146, 3152, 3156, 3165, 3170, 3179, 3182, 3189, 3193, 3202, 3208, 3217, 3222, 3225, 3235, 3239, 3248, 3252, 3258, 3264, 3271, 3275, 3284, 3289, 3298, 3303}
        ;
        int target = 3389   ;
        System.out.println(ans(arr, target));
    }
    static int ans(int[] arr, int target) {
        // first find the range
        // first start with a box of size 2
        int start = 0;
        int end = 1;

        // condition for the target to lie in the range
        while (target > arr[end]) {
            int temp = end + 1; // this is my new start
            // double the box value
            // end = previous end + sizeofbox*2
            end = end + (end - start + 1) * 2;
            start = temp;
        }
        return binarySearch(arr, target, start, end);

    }
    static int binarySearch(int[] arr, int target, int start, int end) {
        while(start <= end) {
            // find the middle element
//            int mid = (start + end) / 2; // might be possible that (start + end) exceeds the range of int in java
            int mid = start + (end - start) / 2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
                // ans found
                return mid;
            }
        }
        return -1;
    }
}
